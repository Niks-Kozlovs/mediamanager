// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int               @id @default(autoincrement())
  email      String            @unique @db.VarChar(255)
  username   String            @unique @db.VarChar(255)
  passhash   String            @db.VarChar(255)
  last_check DateTime          @default(now())
  movie_watchlist  MovieWatchList[]
  movie_favourites MovieFavourites[]
  movie_watchlater MovieWatched[]
  tv_watchlist  TVWatchList[]
  tv_favourites TVFavourites[]
  tv_watchlater TVWatched[]

  @@map("users")
}

model TVWatchList {
  id       Int          @id @default(autoincrement())
  user_id  Int
  tv_id    String
  user     User         @relation(fields: [user_id], references: [id])
  tvDetails    TVDetails @relation(fields: [tv_id], references: [tv_id])

  @@unique([user_id, tv_id])
  @@map("tv_watch_list")
}

model TVFavourites {
  id       Int          @id @default(autoincrement())
  user_id  Int
  tv_id    String
  user     User         @relation(fields: [user_id], references: [id])
  tvDetails    TVDetails @relation(fields: [tv_id], references: [tv_id])

  @@unique([user_id, tv_id])
  @@map("tv_favourites")
}

model TVWatched {
  id       Int          @id @default(autoincrement())
  user_id  Int
  tv_id    String
  user     User         @relation(fields: [user_id], references: [id])
  tvDetails    TVDetails @relation(fields: [tv_id], references: [tv_id])

  @@unique([user_id, tv_id])
  @@map("tv_watched")
}

model MovieDetails {
  movie_id        String            @id
  poster_path     String?
  adult           Boolean
  overview        String?
  release_date    String?
  genre_ids       Int[]
  original_title  String
  original_language String
  title           String
  backdrop_path   String?
  popularity      Float
  vote_count      Int
  video           Boolean
  vote_average    Float
  status MovieStatus?
  last_checked DateTime @default(now())
  last_updated DateTime @updatedAt

  watchlist       MovieWatchList[]
  favourites      MovieFavourites[]
  watched      MovieWatched[]
}

model MovieWatchList {
  id       Int          @id @default(autoincrement())
  user_id  Int
  movie_id String
  user     User         @relation(fields: [user_id], references: [id])
  movieDetails    MovieDetails @relation(fields: [movie_id], references: [movie_id])

  @@unique([user_id, movie_id])
  @@map("movie_watch_list")
}

enum MovieStatus {
  RUMORED
  PLANNED
  IN_PRODUCTION
  POST_PRODUCTION
  RELEASED
  CANCELED
}

model MovieFavourites {
  id       Int          @id @default(autoincrement())
  user_id  Int
  movie_id String
  user     User         @relation(fields: [user_id], references: [id])
  movieDetails    MovieDetails @relation(fields: [movie_id], references: [movie_id])

  @@unique([user_id, movie_id])
  @@map("movie_favourites")
}

model MovieWatched {
  id       Int          @id @default(autoincrement())
  user_id  Int
  movie_id String
  user     User         @relation(fields: [user_id], references: [id])
  movieDetails    MovieDetails @relation(fields: [movie_id], references: [movie_id])

  @@unique([user_id, movie_id])
  @@map("movie_watched")
}

model TVDetails {
  tv_id        String            @id
  poster_path     String?
  popularity      Float
  backdrop_path   String?
  vote_average    Float
  overview        String?
  first_air_date    String
  origin_country String[]
  genre_ids       Int[]
  original_language String
  vote_count      Int
  name           String
  original_name  String
  last_checked DateTime @default(now())
  last_updated DateTime @updatedAt
  episode_count Int
  in_production Boolean

  seasons       TVSeason[]
  watchlist       TVWatchList[]
  favourites      TVFavourites[]
  watched      TVWatched[]
}

model TVSeason {
  id       Int          @id @default(autoincrement())
  tv_id    String
  season_number Int
  air_date String
  episode_count Int
  name String
  overview String
  poster_path String
  season_id Int
  tvDetails TVDetails @relation(fields: [tv_id], references: [tv_id])

  @@map("tv_season")
}
